plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "0.9.10"
    id 'maven'
}

group = 'com.github.am4dr.gradle'
version = '0.4.0-alpha-1'

ext {
    jdkVersion = JavaVersion.VERSION_1_9
    junit_version = '5.1.0'
    libraries = [
            'junit_api': [
                    'org.junit.jupiter:junit-jupiter-api:'+junit_version,
            ],
            'junit_runtime': [
                    'org.junit.jupiter:junit-jupiter-engine:'+junit_version,
            ]
    ]
    standaloneTargetNames = ['unnamed', 'autonamed', 'named']
    testTargetsVersion = '2.0'
}

allprojects {
    apply plugin: 'java-library'

    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion

    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        testImplementation libraries.junit_api
        testRuntime libraries.junit_runtime
    }

    test {
        useJUnitPlatform()
    }
}

project(':standalones') {
    apply plugin: 'maven'

    group = "com.github.am4dr.gradle.java-modularize-plugin"
    version = testTargetsVersion
    archivesBaseName = "test-target-sample"

    def jarTaskNamer = { name -> "${name}Jar" }
    standaloneTargetNames.each { String name ->
        sourceSets.create(name)
        def jarTask = tasks.create(jarTaskNamer(name), Jar) {
            from sourceSets.getByName(name).output
            classifier = name
        }
        configurations.create(name)
        artifacts.add(name, jarTask)
        artifacts.add("archives", jarTask)
    }
    tasks.getByName(jarTaskNamer("autonamed")) {
        manifest {
            attributes.put('Automatic-Module-Name', 'sample.autonamed')
        }
    }
}
project(':dependents') {
    apply plugin: 'maven'

    group = "com.github.am4dr.gradle.java-modularize-plugin"
    version = testTargetsVersion
    archivesBaseName = "test-dependent-target-sample"

    dependencies {
        api "$group:test-target-sample:$testTargetsVersion:unnamed"
    }
    compileJava {
        dependsOn ":standalones:install"
    }
}
project(':testTargets') {
    group = "com.github.am4dr.gradle.java-modularize-plugin"
    version = testTargetsVersion
    archivesBaseName = "test-targets"

    addTestTargetSamplesToTestResources(it)
}

project(':tooling') {
    apply plugin: 'maven'

    version = "0.1.0"
    group = "com.github.am4dr.gradle.java-modularize-plugin"
    archivesBaseName = "tooling"

    dependencies {
        testImplementation project(':testTargets')
    }

    addTestTargetSamplesToTestResources(it)
}

dependencies {
    api project(':tooling')
    implementation gradleApi()

    testImplementation project(':testTargets')
    testImplementation gradleTestKit()
}
addTestTargetSamplesToTestResources(project)
test {
    dependsOn ":standalones:install", ":dependents:install"
}

pluginBundle {
    website = 'https://github.com/am4dr/gradle-java-modularize-plugin'
    vcsUrl = 'https://github.com/am4dr/gradle-java-modularize-plugin'
    description = 'module-info.class generation and injection'
    tags = ['jigsaw', 'modules', 'jlink']

    plugins {
        modularizePlugin {
            id = 'com.github.am4dr.java-modularize'
            displayName = 'Gradle Java Modularize Plugin'
        }
    }
}

def addTestTargetSamplesToTestResources(Project project) {
    project.with {
        sourceSets {
            test {
                resources {
                    srcDirs += [':standalones', ':dependents'].collect { new File(project.project(it).buildDir, 'libs') }
                }
            }
        }
        processTestResources {
            dependsOn(standaloneTargetNames.collect { name -> ":standalones:${name}Jar" })
            dependsOn ':dependents:jar'
        }
    }
}
